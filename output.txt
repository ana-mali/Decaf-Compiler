TokenInfo(type=1 (NAME), string='extern', start=(1, 0), end=(1, 6), line='extern func print_int(int) void;\n')
TokenInfo(type=1 (NAME), string='func', start=(1, 7), end=(1, 11), line='extern func print_int(int) void;\n')
TokenInfo(type=1 (NAME), string='print_int', start=(1, 12), end=(1, 21), line='extern func print_int(int) void;\n')
TokenInfo(type=54 (OP), string='(', start=(1, 21), end=(1, 22), line='extern func print_int(int) void;\n')
TokenInfo(type=1 (NAME), string='int', start=(1, 22), end=(1, 25), line='extern func print_int(int) void;\n')
TokenInfo(type=54 (OP), string=')', start=(1, 25), end=(1, 26), line='extern func print_int(int) void;\n')
TokenInfo(type=1 (NAME), string='void', start=(1, 27), end=(1, 31), line='extern func print_int(int) void;\n')
TokenInfo(type=54 (OP), string=';', start=(1, 31), end=(1, 32), line='extern func print_int(int) void;\n')
TokenInfo(type=4 (NEWLINE), string='\n', start=(1, 32), end=(1, 33), line='extern func print_int(int) void;\n')
TokenInfo(type=61 (NL), string='\n', start=(2, 0), end=(2, 1), line='\n')
TokenInfo(type=1 (NAME), string='package', start=(3, 0), end=(3, 7), line='package GreatestCommonDivisor {\n')
TokenInfo(type=1 (NAME), string='GreatestCommonDivisor', start=(3, 8), end=(3, 29), line='package GreatestCommonDivisor {\n')
TokenInfo(type=54 (OP), string='{', start=(3, 30), end=(3, 31), line='package GreatestCommonDivisor {\n')
TokenInfo(type=61 (NL), string='\n', start=(3, 31), end=(3, 32), line='package GreatestCommonDivisor {\n')
TokenInfo(type=1 (NAME), string='var', start=(4, 4), end=(4, 7), line='    var a int = 10;\n')
TokenInfo(type=1 (NAME), string='a', start=(4, 8), end=(4, 9), line='    var a int = 10;\n')
TokenInfo(type=1 (NAME), string='int', start=(4, 10), end=(4, 13), line='    var a int = 10;\n')
TokenInfo(type=54 (OP), string='=', start=(4, 14), end=(4, 15), line='    var a int = 10;\n')
TokenInfo(type=2 (NUMBER), string='10', start=(4, 16), end=(4, 18), line='    var a int = 10;\n')
TokenInfo(type=54 (OP), string=';', start=(4, 18), end=(4, 19), line='    var a int = 10;\n')
TokenInfo(type=61 (NL), string='\n', start=(4, 19), end=(4, 20), line='    var a int = 10;\n')
TokenInfo(type=1 (NAME), string='var', start=(5, 4), end=(5, 7), line='    var b int = 20;\n')
TokenInfo(type=1 (NAME), string='b', start=(5, 8), end=(5, 9), line='    var b int = 20;\n')
TokenInfo(type=1 (NAME), string='int', start=(5, 10), end=(5, 13), line='    var b int = 20;\n')
TokenInfo(type=54 (OP), string='=', start=(5, 14), end=(5, 15), line='    var b int = 20;\n')
TokenInfo(type=2 (NUMBER), string='20', start=(5, 16), end=(5, 18), line='    var b int = 20;\n')
TokenInfo(type=54 (OP), string=';', start=(5, 18), end=(5, 19), line='    var b int = 20;\n')
TokenInfo(type=61 (NL), string='\n', start=(5, 19), end=(5, 20), line='    var b int = 20;\n')
TokenInfo(type=61 (NL), string='\n', start=(6, 0), end=(6, 1), line='\n')
TokenInfo(type=1 (NAME), string='func', start=(7, 4), end=(7, 8), line='    func main() int {\n')
TokenInfo(type=1 (NAME), string='main', start=(7, 9), end=(7, 13), line='    func main() int {\n')
TokenInfo(type=54 (OP), string='(', start=(7, 13), end=(7, 14), line='    func main() int {\n')
TokenInfo(type=54 (OP), string=')', start=(7, 14), end=(7, 15), line='    func main() int {\n')
TokenInfo(type=1 (NAME), string='int', start=(7, 16), end=(7, 19), line='    func main() int {\n')
TokenInfo(type=54 (OP), string='{', start=(7, 20), end=(7, 21), line='    func main() int {\n')
TokenInfo(type=61 (NL), string='\n', start=(7, 21), end=(7, 22), line='    func main() int {\n')
TokenInfo(type=1 (NAME), string='var', start=(8, 8), end=(8, 11), line='        var x, y, z int;\n')
TokenInfo(type=1 (NAME), string='x', start=(8, 12), end=(8, 13), line='        var x, y, z int;\n')
TokenInfo(type=54 (OP), string=',', start=(8, 13), end=(8, 14), line='        var x, y, z int;\n')
TokenInfo(type=1 (NAME), string='y', start=(8, 15), end=(8, 16), line='        var x, y, z int;\n')
TokenInfo(type=54 (OP), string=',', start=(8, 16), end=(8, 17), line='        var x, y, z int;\n')
TokenInfo(type=1 (NAME), string='z', start=(8, 18), end=(8, 19), line='        var x, y, z int;\n')
TokenInfo(type=1 (NAME), string='int', start=(8, 20), end=(8, 23), line='        var x, y, z int;\n')
TokenInfo(type=54 (OP), string=';', start=(8, 23), end=(8, 24), line='        var x, y, z int;\n')
TokenInfo(type=61 (NL), string='\n', start=(8, 24), end=(8, 25), line='        var x, y, z int;\n')
TokenInfo(type=1 (NAME), string='x', start=(9, 8), end=(9, 9), line='        x = a;\n')
TokenInfo(type=54 (OP), string='=', start=(9, 10), end=(9, 11), line='        x = a;\n')
TokenInfo(type=1 (NAME), string='a', start=(9, 12), end=(9, 13), line='        x = a;\n')
TokenInfo(type=54 (OP), string=';', start=(9, 13), end=(9, 14), line='        x = a;\n')
TokenInfo(type=61 (NL), string='\n', start=(9, 14), end=(9, 15), line='        x = a;\n')
TokenInfo(type=1 (NAME), string='y', start=(10, 8), end=(10, 9), line='        y = b;\n')
TokenInfo(type=54 (OP), string='=', start=(10, 10), end=(10, 11), line='        y = b;\n')
TokenInfo(type=1 (NAME), string='b', start=(10, 12), end=(10, 13), line='        y = b;\n')
TokenInfo(type=54 (OP), string=';', start=(10, 13), end=(10, 14), line='        y = b;\n')
TokenInfo(type=61 (NL), string='\n', start=(10, 14), end=(10, 15), line='        y = b;\n')
TokenInfo(type=1 (NAME), string='z', start=(11, 8), end=(11, 9), line='        z = gcd(x, y);\n')
TokenInfo(type=54 (OP), string='=', start=(11, 10), end=(11, 11), line='        z = gcd(x, y);\n')
TokenInfo(type=1 (NAME), string='gcd', start=(11, 12), end=(11, 15), line='        z = gcd(x, y);\n')
TokenInfo(type=54 (OP), string='(', start=(11, 15), end=(11, 16), line='        z = gcd(x, y);\n')
TokenInfo(type=1 (NAME), string='x', start=(11, 16), end=(11, 17), line='        z = gcd(x, y);\n')
TokenInfo(type=54 (OP), string=',', start=(11, 17), end=(11, 18), line='        z = gcd(x, y);\n')
TokenInfo(type=1 (NAME), string='y', start=(11, 19), end=(11, 20), line='        z = gcd(x, y);\n')
TokenInfo(type=54 (OP), string=')', start=(11, 20), end=(11, 21), line='        z = gcd(x, y);\n')
TokenInfo(type=54 (OP), string=';', start=(11, 21), end=(11, 22), line='        z = gcd(x, y);\n')
TokenInfo(type=61 (NL), string='\n', start=(11, 22), end=(11, 23), line='        z = gcd(x, y);\n')
TokenInfo(type=61 (NL), string='\n', start=(12, 0), end=(12, 1), line='\n')
TokenInfo(type=54 (OP), string='//', start=(13, 8), end=(13, 10), line='        // print_int is part of the standard input-output library\n')
TokenInfo(type=1 (NAME), string='print_int', start=(13, 11), end=(13, 20), line='        // print_int is part of the standard input-output library\n')
TokenInfo(type=1 (NAME), string='is', start=(13, 21), end=(13, 23), line='        // print_int is part of the standard input-output library\n')
TokenInfo(type=1 (NAME), string='part', start=(13, 24), end=(13, 28), line='        // print_int is part of the standard input-output library\n')
TokenInfo(type=1 (NAME), string='of', start=(13, 29), end=(13, 31), line='        // print_int is part of the standard input-output library\n')
TokenInfo(type=1 (NAME), string='the', start=(13, 32), end=(13, 35), line='        // print_int is part of the standard input-output library\n')
TokenInfo(type=1 (NAME), string='standard', start=(13, 36), end=(13, 44), line='        // print_int is part of the standard input-output library\n')
TokenInfo(type=1 (NAME), string='input', start=(13, 45), end=(13, 50), line='        // print_int is part of the standard input-output library\n')
TokenInfo(type=54 (OP), string='-', start=(13, 50), end=(13, 51), line='        // print_int is part of the standard input-output library\n')
TokenInfo(type=1 (NAME), string='output', start=(13, 51), end=(13, 57), line='        // print_int is part of the standard input-output library\n')
TokenInfo(type=1 (NAME), string='library', start=(13, 58), end=(13, 65), line='        // print_int is part of the standard input-output library\n')
TokenInfo(type=61 (NL), string='\n', start=(13, 65), end=(13, 66), line='        // print_int is part of the standard input-output library\n')
TokenInfo(type=54 (OP), string='//', start=(14, 0), end=(14, 2), line='//        print_int(z);\n')
TokenInfo(type=1 (NAME), string='print_int', start=(14, 10), end=(14, 19), line='//        print_int(z);\n')
TokenInfo(type=54 (OP), string='(', start=(14, 19), end=(14, 20), line='//        print_int(z);\n')
TokenInfo(type=1 (NAME), string='z', start=(14, 20), end=(14, 21), line='//        print_int(z);\n')
TokenInfo(type=54 (OP), string=')', start=(14, 21), end=(14, 22), line='//        print_int(z);\n')
TokenInfo(type=54 (OP), string=';', start=(14, 22), end=(14, 23), line='//        print_int(z);\n')
TokenInfo(type=61 (NL), string='\n', start=(14, 23), end=(14, 24), line='//        print_int(z);\n')
TokenInfo(type=54 (OP), string='}', start=(15, 4), end=(15, 5), line='    }\n')
TokenInfo(type=61 (NL), string='\n', start=(15, 5), end=(15, 6), line='    }\n')
TokenInfo(type=61 (NL), string='\n', start=(16, 0), end=(16, 1), line='\n')
TokenInfo(type=54 (OP), string='//', start=(17, 4), end=(17, 6), line='    // function that computes the greatest common divisor\n')
TokenInfo(type=1 (NAME), string='function', start=(17, 7), end=(17, 15), line='    // function that computes the greatest common divisor\n')
TokenInfo(type=1 (NAME), string='that', start=(17, 16), end=(17, 20), line='    // function that computes the greatest common divisor\n')
TokenInfo(type=1 (NAME), string='computes', start=(17, 21), end=(17, 29), line='    // function that computes the greatest common divisor\n')
TokenInfo(type=1 (NAME), string='the', start=(17, 30), end=(17, 33), line='    // function that computes the greatest common divisor\n')
TokenInfo(type=1 (NAME), string='greatest', start=(17, 34), end=(17, 42), line='    // function that computes the greatest common divisor\n')
TokenInfo(type=1 (NAME), string='common', start=(17, 43), end=(17, 49), line='    // function that computes the greatest common divisor\n')
TokenInfo(type=1 (NAME), string='divisor', start=(17, 50), end=(17, 57), line='    // function that computes the greatest common divisor\n')
TokenInfo(type=61 (NL), string='\n', start=(17, 57), end=(17, 58), line='    // function that computes the greatest common divisor\n')
TokenInfo(type=1 (NAME), string='func', start=(18, 4), end=(18, 8), line='    func gcd(a int, b int) int {\n')
TokenInfo(type=1 (NAME), string='gcd', start=(18, 9), end=(18, 12), line='    func gcd(a int, b int) int {\n')
TokenInfo(type=54 (OP), string='(', start=(18, 12), end=(18, 13), line='    func gcd(a int, b int) int {\n')
TokenInfo(type=1 (NAME), string='a', start=(18, 13), end=(18, 14), line='    func gcd(a int, b int) int {\n')
TokenInfo(type=1 (NAME), string='int', start=(18, 15), end=(18, 18), line='    func gcd(a int, b int) int {\n')
TokenInfo(type=54 (OP), string=',', start=(18, 18), end=(18, 19), line='    func gcd(a int, b int) int {\n')
TokenInfo(type=1 (NAME), string='b', start=(18, 20), end=(18, 21), line='    func gcd(a int, b int) int {\n')
TokenInfo(type=1 (NAME), string='int', start=(18, 22), end=(18, 25), line='    func gcd(a int, b int) int {\n')
TokenInfo(type=54 (OP), string=')', start=(18, 25), end=(18, 26), line='    func gcd(a int, b int) int {\n')
TokenInfo(type=1 (NAME), string='int', start=(18, 27), end=(18, 30), line='    func gcd(a int, b int) int {\n')
TokenInfo(type=54 (OP), string='{', start=(18, 31), end=(18, 32), line='    func gcd(a int, b int) int {\n')
TokenInfo(type=61 (NL), string='\n', start=(18, 32), end=(18, 33), line='    func gcd(a int, b int) int {\n')
TokenInfo(type=1 (NAME), string='if', start=(19, 8), end=(19, 10), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=54 (OP), string='(', start=(19, 11), end=(19, 12), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=1 (NAME), string='b', start=(19, 12), end=(19, 13), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=54 (OP), string='==', start=(19, 14), end=(19, 16), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=2 (NUMBER), string='0', start=(19, 17), end=(19, 18), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=54 (OP), string=')', start=(19, 18), end=(19, 19), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=54 (OP), string='{', start=(19, 20), end=(19, 21), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=1 (NAME), string='return', start=(19, 22), end=(19, 28), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=54 (OP), string='(', start=(19, 28), end=(19, 29), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=1 (NAME), string='a', start=(19, 29), end=(19, 30), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=54 (OP), string=')', start=(19, 30), end=(19, 31), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=54 (OP), string=';', start=(19, 31), end=(19, 32), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=54 (OP), string='}', start=(19, 33), end=(19, 34), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=61 (NL), string='\n', start=(19, 34), end=(19, 35), line='        if (b == 0) { return(a); }\n')
TokenInfo(type=1 (NAME), string='else', start=(20, 8), end=(20, 12), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=54 (OP), string='{', start=(20, 13), end=(20, 14), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=1 (NAME), string='return', start=(20, 15), end=(20, 21), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=54 (OP), string='(', start=(20, 21), end=(20, 22), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=1 (NAME), string='gcd', start=(20, 23), end=(20, 26), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=54 (OP), string='(', start=(20, 26), end=(20, 27), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=1 (NAME), string='b', start=(20, 27), end=(20, 28), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=54 (OP), string=',', start=(20, 28), end=(20, 29), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=1 (NAME), string='a', start=(20, 30), end=(20, 31), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=54 (OP), string='%', start=(20, 32), end=(20, 33), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=1 (NAME), string='b', start=(20, 34), end=(20, 35), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=54 (OP), string=')', start=(20, 35), end=(20, 36), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=54 (OP), string=')', start=(20, 37), end=(20, 38), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=54 (OP), string=';', start=(20, 38), end=(20, 39), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=54 (OP), string='}', start=(20, 40), end=(20, 41), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=61 (NL), string='\n', start=(20, 41), end=(20, 42), line='        else { return( gcd(b, a % b) ); }\n')
TokenInfo(type=54 (OP), string='}', start=(21, 4), end=(21, 5), line='    }\n')
TokenInfo(type=61 (NL), string='\n', start=(21, 5), end=(21, 6), line='    }\n')
TokenInfo(type=54 (OP), string='}', start=(22, 0), end=(22, 1), line='}')
TokenInfo(type=4 (NEWLINE), string='', start=(22, 1), end=(22, 2), line='')
TokenInfo(type=0 (ENDMARKER), string='', start=(23, 0), end=(23, 0), line='')
number of identifiers: 30
